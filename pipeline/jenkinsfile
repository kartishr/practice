def CONTAINER_NAME="smapp"
def CONTAINER_TAG="0.0.2"
def DOCKER_HUB_USER="kartish"
def HTTP_PORT="8091"

node {

    // stage('Initialize'){
    //     def dockerHome = tool 'myDocker'
    //     def mavenHome  = tool 'myMaven'
    //     env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"
    // }

    stage('Checkout') {
        checkout scm
    }

    // stage('Build'){
    //     sh "mvn clean install"
    // }

    // stage('Sonar'){
    //     try {
    //         sh "mvn sonar:sonar"
    //     } catch(error){
    //         echo "The sonar server could not be reached ${error}"
    //     }
    //  }

    stage("Image Prune"){
        sh 'whoami'
        imagePrune(CONTAINER_NAME)
    }

    stage('Image Build'){
        imageBuild(CONTAINER_NAME, CONTAINER_TAG)
    }

    stage('Push to Docker Registry'){
        withCredentials([usernamePassword(credentialsId: 'dockerHubAccount', usernameVariable: 'kartish', passwordVariable: 'Kartish@22')]) {
            pushToImage(CONTAINER_NAME, CONTAINER_TAG, USERNAME, PASSWORD)
        }
    }

    // stage('Run App'){
    //     runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT)
    // }

}

def imagePrune(containerName){
    try {
        sh "docker image prune -f"
    } catch(error){}
}

def imageBuild(containerName, tag){
    sh "cd smapp"
    sh "docker build -t $containerName:$tag  -t $containerName --pull --no-cache ."
    echo "Image build complete"
}

def pushToImage(containerName, tag, dockerUser, dockerPassword){
    sh "docker login -u $dockerUser -p $dockerPassword"
    sh "docker tag $containerName:$tag $dockerUser/$containerName:$tag"
    sh "docker push $dockerUser/$containerName:$tag"
    echo "Image push complete"
}

// def runApp(containerName, tag, dockerHubUser, httpPort){
//     sh "docker pull $dockerHubUser/$containerName"
//     sh "docker run -d --rm -p $httpPort:$httpPort --name $containerName $dockerHubUser/$containerName:$tag"
//     echo "Application started on port: ${httpPort} (http)"
// }